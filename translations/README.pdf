<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-type" content="text/html;charset=UTF-8">
<script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML"> </script>
<script type="text/x-mathjax-config">MathJax.Hub.Config({"tex2jax": {"inlineMath": [['$','$'], ['\\(','\\)']]}});</script>
<script type="text/x-mathjax-config">MathJax.Hub.Config({"HTML-CSS": {"availableFonts":["TeX"],"scale": 150}});</script>

<style>
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/

body {
	font-family: "Segoe WPC", "Segoe UI", "SFUIText-Light", "HelveticaNeue-Light", sans-serif, "Droid Sans Fallback";
	font-size: 14px;
	padding: 0 12px;
	line-height: 22px;
	word-wrap: break-word;
}

#code-csp-warning {
	position: fixed;
	top: 0;
	right: 0;
	color: white;
	margin: 16px;
	text-align: center;
	font-size: 12px;
	font-family: sans-serif;
	background-color:#444444;
	cursor: pointer;
	padding: 6px;
	box-shadow: 1px 1px 1px rgba(0,0,0,.25);
}

#code-csp-warning:hover {
	text-decoration: none;
	background-color:#007acc;
	box-shadow: 2px 2px 2px rgba(0,0,0,.25);
}


body.scrollBeyondLastLine {
	margin-bottom: calc(100vh - 22px);
}

body.showEditorSelection .code-line {
	position: relative;
}

body.showEditorSelection .code-active-line:before,
body.showEditorSelection .code-line:hover:before {
	content: "";
	display: block;
	position: absolute;
	top: 0;
	left: -12px;
	height: 100%;
}

body.showEditorSelection li.code-active-line:before,
body.showEditorSelection li.code-line:hover:before {
	left: -30px;
}

.vscode-light.showEditorSelection .code-active-line:before {
	border-left: 3px solid rgba(0, 0, 0, 0.15);
}

.vscode-light.showEditorSelection .code-line:hover:before {
	border-left: 3px solid rgba(0, 0, 0, 0.40);
}

.vscode-dark.showEditorSelection .code-active-line:before {
	border-left: 3px solid rgba(255, 255, 255, 0.4);
}

.vscode-dark.showEditorSelection .code-line:hover:before {
	border-left: 3px solid rgba(255, 255, 255, 0.60);
}

.vscode-high-contrast.showEditorSelection .code-active-line:before {
	border-left: 3px solid rgba(255, 160, 0, 0.7);
}

.vscode-high-contrast.showEditorSelection .code-line:hover:before {
	border-left: 3px solid rgba(255, 160, 0, 1);
}

img {
	max-width: 100%;
	max-height: 100%;
}

a {
	color: #4080D0;
	text-decoration: none;
}

a:focus,
input:focus,
select:focus,
textarea:focus {
	outline: 1px solid -webkit-focus-ring-color;
	outline-offset: -1px;
}

hr {
	border: 0;
	height: 2px;
	border-bottom: 2px solid;
}

h1 {
	padding-bottom: 0.3em;
	line-height: 1.2;
	border-bottom-width: 1px;
	border-bottom-style: solid;
}

h1, h2, h3 {
	font-weight: normal;
}

h1 code,
h2 code,
h3 code,
h4 code,
h5 code,
h6 code {
	font-size: inherit;
	line-height: auto;
}

a:hover {
	color: #4080D0;
	text-decoration: underline;
}

table {
	border-collapse: collapse;
}

table > thead > tr > th {
	text-align: left;
	border-bottom: 1px solid;
}

table > thead > tr > th,
table > thead > tr > td,
table > tbody > tr > th,
table > tbody > tr > td {
	padding: 5px 10px;
}

table > tbody > tr + tr > td {
	border-top: 1px solid;
}

blockquote {
	margin: 0 7px 0 5px;
	padding: 0 16px 0 10px;
	border-left: 5px solid;
}

code {
	font-family: Menlo, Monaco, Consolas, "Droid Sans Mono", "Courier New", monospace, "Droid Sans Fallback";
	font-size: 14px;
	line-height: 19px;
}

body.wordWrap pre {
	white-space: pre-wrap;
}

.mac code {
	font-size: 12px;
	line-height: 18px;
}

pre:not(.hljs),
pre.hljs code > div {
	padding: 16px;
	border-radius: 3px;
	overflow: auto;
}

/** Theming */

.vscode-light,
.vscode-light pre code {
	color: rgb(30, 30, 30);
}

.vscode-dark,
.vscode-dark pre code {
	color: #DDD;
}

.vscode-high-contrast,
.vscode-high-contrast pre code {
	color: white;
}

.vscode-light code {
	color: #A31515;
}

.vscode-dark code {
	color: #D7BA7D;
}

.vscode-light pre:not(.hljs),
.vscode-light code > div {
	background-color: rgba(220, 220, 220, 0.4);
}

.vscode-dark pre:not(.hljs),
.vscode-dark code > div {
	background-color: rgba(10, 10, 10, 0.4);
}

.vscode-high-contrast pre:not(.hljs),
.vscode-high-contrast code > div {
	background-color: rgb(0, 0, 0);
}

.vscode-high-contrast h1 {
	border-color: rgb(0, 0, 0);
}

.vscode-light table > thead > tr > th {
	border-color: rgba(0, 0, 0, 0.69);
}

.vscode-dark table > thead > tr > th {
	border-color: rgba(255, 255, 255, 0.69);
}

.vscode-light h1,
.vscode-light hr,
.vscode-light table > tbody > tr + tr > td {
	border-color: rgba(0, 0, 0, 0.18);
}

.vscode-dark h1,
.vscode-dark hr,
.vscode-dark table > tbody > tr + tr > td {
	border-color: rgba(255, 255, 255, 0.18);
}

.vscode-light blockquote,
.vscode-dark blockquote {
	background: rgba(127, 127, 127, 0.1);
	border-color: rgba(0, 122, 204, 0.5);
}

.vscode-high-contrast blockquote {
	background: transparent;
	border-color: #fff;
}
</style>

<style>
/* Tomorrow Theme */
/* http://jmblog.github.com/color-themes-for-google-code-highlightjs */
/* Original theme - https://github.com/chriskempson/tomorrow-theme */

/* Tomorrow Comment */
.hljs-comment,
.hljs-quote {
	color: #8e908c;
}

/* Tomorrow Red */
.hljs-variable,
.hljs-template-variable,
.hljs-tag,
.hljs-name,
.hljs-selector-id,
.hljs-selector-class,
.hljs-regexp,
.hljs-deletion {
	color: #c82829;
}

/* Tomorrow Orange */
.hljs-number,
.hljs-built_in,
.hljs-builtin-name,
.hljs-literal,
.hljs-type,
.hljs-params,
.hljs-meta,
.hljs-link {
	color: #f5871f;
}

/* Tomorrow Yellow */
.hljs-attribute {
	color: #eab700;
}

/* Tomorrow Green */
.hljs-string,
.hljs-symbol,
.hljs-bullet,
.hljs-addition {
	color: #718c00;
}

/* Tomorrow Blue */
.hljs-title,
.hljs-section {
	color: #4271ae;
}

/* Tomorrow Purple */
.hljs-keyword,
.hljs-selector-tag {
	color: #8959a8;
}

.hljs {
	display: block;
	overflow-x: auto;
	color: #4d4d4c;
	padding: 0.5em;
}

.hljs-emphasis {
	font-style: italic;
}

.hljs-strong {
	font-weight: bold;
}
</style>

<style>
/*
 * Markdown PDF CSS
 */

pre {
	background-color: #f8f8f8;
	border: 1px solid #cccccc;
	border-radius: 3px;
	overflow-x: auto;
	white-space: pre-wrap;
	overflow-wrap: break-word;
}

pre:not(.hljs) {
	padding: 23px;
	line-height: 19px;
}

blockquote {
	background: rgba(127, 127, 127, 0.1);
	border-color: rgba(0, 122, 204, 0.5);
}

.emoji {
	height: 1.4em;
}

/* for inline code */
:not(pre):not(.hljs) > code {
	color: #C9AE75; /* Change the old color so it seems less like an error */
	font-size: inherit;
}

</style>

</head>
<body>
<h1 id="musescore-tempochanges---translations">MuseScore TempoChanges - Translations</h1>
<h2 id="brief">Brief</h2>
<p>This plugin now comes with translations of the dialogs into German, French (thanks to lasconic), Spanish (thanks to jorgk), Italian (thanks to Shoichi) and Simplified Chinese (thanks to David Copperfield), for all other language settings in MuseScore, it remains English. More translations are welcome, just contact us for including them.</p>
<p>Feel free to add Pull Requests for your language</p>
<p>This plugin leverages some of its translations from the MuseScore core program. Your translation should only handle the texts within the TempoChanges context. Leave the other texts unfinished.</p>
<h2 id="files-list">Files list</h2>
<ul>
<li>
<p><a href="#windows">Windows</a></p>
<pre class="hljs"><code><div>generating these ts files.bat
generating these qm files.bat
</div></code></pre>
</li>
<li>
<p><a href="#macos-linux">macOS / Linux</a></p>
<pre class="hljs"><code><div>translation_utility.sh
</div></code></pre>
</li>
</ul>
<h2 id="how-to-use-the-translation-utilities">How to use the translation utilities</h2>
<h3 id="requirement">Requirement</h3>
<ul>
<li>These utilities needs <a href="https://qt.io">QT</a> library.</li>
</ul>
<h3 id="on-windows-windows">On Windows {#windows}</h3>
<h4 id="1-adding-translation-ts-files">1. Adding translation <code>(.ts)</code> files</h4>
<ol>
<li>Open <code>generating these ts files.bat</code> in editor. (e.g, VSCode or Notepad, etc.)</li>
<li>Append your new file name to the end of the first line, in the format <strong>locale_</strong><em>language-code</em><strong>.ts</strong> (e.g, locale_de, local_zh-cn, etc.).</li>
<li>Double click on <code>generating these ts files.bat</code> or run it in <code>cmd.exe</code>.</li>
<li>You will find the new file in the same directory as the <code>generating these ts files.bat</code>.</li>
</ol>
<h4 id="2-start-translating">2 Start Translating</h4>
<ol>
<li>Right click on a <code>.ts</code> fils to open with <code>Qt Linguist.exe</code></li>
<li>Start translating phrases.</li>
</ol>
<h4 id="3-updating-qm-files">3. Updating <code>.qm</code> files</h4>
<ol>
<li>Just double click on <code>generating these qm files.bat</code> or run it in <code>cmd.exe</code>.</li>
<li>You will find the new file in the same directory as the <code>generating these qm files.bat</code>.</li>
</ol>
<h4 id="4-preview-your-translation">4. Preview Your Translation</h4>
<p>Copy and move the whole <code>MuseScore_TempoChanges</code> folder to MuseScore <code>plugin</code> (You may check the path in MuseScore.exe, from the <code>main menu</code>: <code>File</code> â†’ <code>Preferences...</code> &gt; <code>General</code> tab &gt; <code>Folders</code> section) to test the translation.</p>
<p>You may need to adjust some phrases during this process. Then do step 2 and step 3 again.</p>
<h3 id="on-linux-macos-macos-linux">On Linux / macOS {#macos-linux}</h3>
<p>Use <code>translation_utility.sh</code>.</p>
<p>This is a 2-in-1 utility, which enables you to process <code>.ts</code> and <code>.qm</code> files in an efficient way.</p>
<h4 id="1-preparation">1. Preparation</h4>
<p>Before running the script, you have to assign privilege for <code>translation_utility.sh</code> using</p>
<pre class="hljs"><code><div>sudo chmod u+x [/path/filename]
</div></code></pre>
<h4 id="2-generating-new-ts-translating-updating-qm">2. Generating new <code>.ts</code> / Translating / Updating <code>.qm</code></h4>
<p>Then you can double click on it or run it in the Terminal. The instructions are shown in the UI.</p>
<p>After generating .ts files, the <code>Linguist.app</code> will automatically launch.</p>
<h4 id="3-preview-your-translation">3 Preview Your Translation</h4>
<p>Copy and move the whole <code>MuseScore_TempoChanges</code> folder to  MuseScore <code>plugin</code> (You may check the path in MuseScore.app, from the <code>top menu</code>: <code>MuseScore</code> â†’ <code>Preferences...</code> &gt; <code>General</code> tab &gt; <code>Folders</code> section) to test the translation.</p>
<p>You may need to adjust some phrases during this process. Then modify the translation.</p>
<h4 id="cannot-use-this-utility-debug">Cannot use this utility? {#debug}</h4>
<h5 id="command-not-found-command-not-found">Command not found {#command-not-found}</h5>
<ol>
<li>
<p>Launch Terminal, type</p>
<pre class="hljs"><code><div>sudo vi ~/.bash_profile
</div></code></pre>
</li>
<li>
<p>Go the the last line of <code>.bash_profile</code>, then press <em><code>i</code></em> to enter the <strong>I</strong>nsert mode of <em>Vim editor</em>. Then put following scripts into <code>.bash_profile</code>:
<em>(You might have to modify these scripts to adapt your systems.)</em></p>
<pre class="hljs"><code><div><span class="hljs-comment"># This is an example of standard macOS settings.</span>
<span class="hljs-built_in">export</span> QTDIR=<span class="hljs-variable">$PATH</span>:~/Qt5.15.2/5.15.2/clang_64
<span class="hljs-built_in">export</span> LD_LIBRARY_PATH=<span class="hljs-variable">$LD_LIBRARY_PATH</span>:<span class="hljs-variable">$QTDIR</span>/lib
<span class="hljs-built_in">export</span> PATH=<span class="hljs-variable">$PATH</span>:<span class="hljs-variable">$QTDIR</span>/bin
</div></code></pre>
</li>
<li>
<p>Press <code>esc</code> on your keyboard, then type <code>:wq</code> to quit from vim editor.</p>
</li>
<li>
<p>Type following command to enable the configurations.</p>
<pre class="hljs"><code><div><span class="hljs-built_in">source</span> ~/.bash_profile
</div></code></pre>
</li>
<li>
<p>Try to verify with following command .</p>
<pre class="hljs"><code><div>qmake
lupdate
lrelease
</div></code></pre>
</li>
</ol>
<h6 id="for-zsh-shell-on-mac">For <code>zsh</code> shell on mac</h6>
<p>If you are using <code>zsh</code> on macOS, after you have done the steps <a href="#command-not-found">above</a> you will find that you still have to do <code>source ~/.bash_profile</code> everytime after a restart of Terminal. Here is the solution:</p>
<ol>
<li>
<p>Edit / Create <code>.zshrc</code> with</p>
<pre class="hljs"><code><div>sudo vi ~/.zshrc
</div></code></pre>
</li>
<li>
<p>Add following script</p>
<pre class="hljs"><code><div><span class="hljs-built_in">source</span> ~/.bash_profile
</div></code></pre>
</li>
<li>
<p>Press <code>esc</code> on your keyboard, then type <code>:wq</code> to quit from vim editor.</p>
</li>
<li>
<p>Try to verify with following command .</p>
<pre class="hljs"><code><div>qmake
lupdate
lrelease
</div></code></pre>
</li>
</ol>
<h4 id="adaptation">Adaptation</h4>
<ul>
<li>The macOS / Linux utility (<code>translation_utility.sh</code>) has been tested on macOS 12.</li>
<li>Windows users have to provide the path to lupdate/lrelease manually, so far.</li>
</ul>

</body>
</html>
